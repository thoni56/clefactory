/* -*- c -*-*/
#include <cgreen/mocks.h>
#include "io.h"


char **getFilesInCurrentDirectory(void) {
    return (char **)mock();
}

bool isDirectory(char *fullPath) {
    return (bool)mock(fullPath);
}

bool directoryExists(char *fullPath) {
    return (bool)mock(fullPath);
}

bool fileExists(char *fullPath) {
    return (bool)mock(fullPath);
}

int fileStatus(char *path, struct stat *statbuf) {
    return (int)mock(path, statbuf);
}

time_t fileModificationTime(char *path) {
    return (time_t)mock(path);
}

size_t fileSize(char *path) {
    return (size_t)mock(path);
}

FILE *openFile(char *fileName, char *modes) {
    return (FILE *)mock(fileName, modes);
}

int closeFile(FILE *file) {
    return (int)mock(file);
}

void createDirectory(char *dirName) {
    mock(dirName);
}

void recursivelyCreateFileDirIfNotExists(char *fpath) {
    mock(fpath);
}

void removeFile(char *fileName) {
    mock(fileName);
}

size_t readFile(FILE *file, void *buffer, size_t count) {
    return (size_t)mock(buffer, count, 1, file);
}

size_t writeFile(FILE *file, void *buffer, size_t count) {
    return (size_t)mock(buffer, count, 1, file);
}

int readChar(FILE *file) {
    return (int)mock(file);
}

char *getEnv(const char *variable) {
    return (char *)mock(variable);
}

char *getCwd(char *buffer, size_t size) {
    return (char *)mock(buffer, size);
}

int writePipe(int pipe, const char *buffer, size_t length) {
    return mock(pipe, buffer, length);
}

int readPipe(int pipe, char *buffer, size_t size) {
    return mock(pipe, buffer, size);
}

char *readLine(char *buffer, size_t max_size, FILE *file) {
    return (char *)mock(buffer, max_size, file);
}
